# House-specific scripts

# CO2 LED Notification Scripts
co2_led_red_pulse:
  alias: "CO2 Red Pulse Notification"
  description: "Gradually pulse LED red based on CO2 level intensity"
  fields:
    entity_id:
      description: "LED strip entity to control"
      example: "light.bedroom_led_strip"
    co2_level:
      description: "Current CO2 level in ppm"
      example: 1350
  sequence:
    # Store current light state for restoration
    - service: scene.create
      data:
        scene_id: "co2_led_restore_{{ entity_id.split('.')[1] }}"
        snapshot_entities:
          - "{{ entity_id }}"
    
    # Calculate red intensity based on CO2 level (1200-2000+ ppm range)
    - variables:
        intensity: >
          {% set co2 = co2_level | int %}
          {% if co2 <= 1200 %}
            0.3
          {% elif co2 >= 2000 %}
            1.0
          {% else %}
            {{ 0.3 + (co2 - 1200) * 0.7 / 800 }}
          {% endif %}
        red_brightness: "{{ (255 * intensity) | int }}"
    
    # Smooth transition to red with calculated intensity
    - service: light.turn_on
      target:
        entity_id: "{{ entity_id }}"
      data:
        rgb_color: [255, 0, 0]
        brightness: "{{ red_brightness }}"
        transition: 3
    
    # Use native breathe effect for smooth red pulsing
    - service: light.turn_on
      target:
        entity_id: "{{ entity_id }}"
      data:
        effect: "breathe"
        color_name: "red"
        brightness: "{{ red_brightness }}"
    - delay: 18  # 3 breathing cycles at ~6 seconds each

co2_led_green_pulse:
  alias: "CO2 Green Pulse Notification"
  description: "Gentle green pulse for good air quality in winter"
  fields:
    entity_id:
      description: "LED strip entity to control"
      example: "light.bedroom_led_strip"
  sequence:
    # Store current light state for restoration
    - service: scene.create
      data:
        scene_id: "co2_led_restore_{{ entity_id.split('.')[1] }}"
        snapshot_entities:
          - "{{ entity_id }}"
    
    # Smooth transition to soft green
    - service: light.turn_on
      target:
        entity_id: "{{ entity_id }}"
      data:
        rgb_color: [0, 255, 100]  # Soft green with slight yellow tint
        brightness: 100  # Gentle brightness
        transition: 4
    
    # Use native breathe effect for gentle green pulsing
    - service: light.turn_on
      target:
        entity_id: "{{ entity_id }}"
      data:
        effect: "breathe"
        color_name: "green"
        brightness: 100
    - delay: 12  # 2 breathing cycles at ~6 seconds each

co2_led_restore_normal:
  alias: "Restore Normal LED State"
  description: "Restore LED to previous state before CO2 notification"
  fields:
    entity_id:
      description: "LED strip entity to restore"
      example: "light.bedroom_led_strip"
  sequence:
    # Restore the saved scene
    - service: scene.turn_on
      data:
        entity_id: "scene.co2_led_restore_{{ entity_id.split('.')[1] }}"
        transition: 5
    
    # Clean up the temporary scene after restoration
    - delay: 6
    - service: scene.delete
      data:
        entity_id: "scene.co2_led_restore_{{ entity_id.split('.')[1] }}"
      continue_on_error: true