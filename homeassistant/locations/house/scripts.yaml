# House-specific scripts

# Shared CO2 LED Breathing Effect Script
co2_led_breathing_effect:
  alias: "CO2 LED Breathing Effect"
  description: "Smooth breathing pulse effect for any LED color/brightness"
  fields:
    entity_id:
      description: "LED strip entity to control"
      example: "light.bedroom_led_strip"
    target_brightness:
      description: "Target brightness for the effect"
      example: 200
    pulse_count:
      description: "Number of breathing cycles"
      example: 3
  sequence:
        # Create mathematically smooth breathing effect using sine wave
    - repeat:
        count: 3
        sequence:
          # Breathing cycle: 20 steps over 16 seconds for ultra-smooth sine wave
          - repeat:
              count: 20
              sequence:
                - variables:
                    # Calculate sine wave position (0 to 2Ï€ over 20 steps)
                    angle: "{{ (repeat.index - 1) * 6.28318 / 20 }}"
                    # Sine wave from 0.6 to 1.0 (60% to 100% brightness)
                    sine_value: "{{ (sin(angle) + 1) / 2 }}"
                    current_brightness: "{{ (red_brightness * (0.6 + 0.4 * sine_value)) | int }}"
                - service: light.turn_on
                  target:
                    entity_id: "{{ entity_id }}"
                  data:
                    brightness: "{{ current_brightness }}"
                    transition: 0.8
                - delay: 0.8

# CO2 LED Notification Scripts
co2_led_red_pulse:
  alias: "CO2 Red Pulse Notification"
  description: "Gradually pulse LED red based on CO2 level intensity"
  fields:
    entity_id:
      description: "LED strip entity to control"
      example: "light.bedroom_led_strip"
    co2_level:
      description: "Current CO2 level in ppm"
      example: 1350
  sequence:
    # Store current light state for restoration
    - service: scene.create
      data:
        scene_id: "co2_led_restore_{{ entity_id.split('.')[1] }}"
        snapshot_entities:
          - "{{ entity_id }}"
    
    # Calculate red intensity based on CO2 level (1200-2000+ ppm range)
    - variables:
        intensity: >
          {% set co2 = co2_level | int %}
          {% if co2 <= 1200 %}
            0.3
          {% elif co2 >= 2000 %}
            1.0
          {% else %}
            {{ 0.3 + (co2 - 1200) * 0.7 / 800 }}
          {% endif %}
        red_brightness: "{{ (255 * intensity) | int }}"
    
    # Smooth transition to red with calculated intensity
    - service: light.turn_on
      target:
        entity_id: "{{ entity_id }}"
      data:
        rgb_color: [255, 0, 0]
        brightness: "{{ red_brightness }}"
        transition: 3
    
    # Use shared breathing effect
    - service: script.co2_led_breathing_effect
      data:
        entity_id: "{{ entity_id }}"
        target_brightness: "{{ red_brightness }}"
        pulse_count: 3

co2_led_green_pulse:
  alias: "CO2 Green Pulse Notification"
  description: "Gentle green pulse for good air quality in winter"
  fields:
    entity_id:
      description: "LED strip entity to control"
      example: "light.bedroom_led_strip"
  sequence:
    # Store current light state for restoration
    - service: scene.create
      data:
        scene_id: "co2_led_restore_{{ entity_id.split('.')[1] }}"
        snapshot_entities:
          - "{{ entity_id }}"
    
    # Smooth transition to soft green
    - service: light.turn_on
      target:
        entity_id: "{{ entity_id }}"
      data:
        rgb_color: [0, 255, 100]  # Soft green with slight yellow tint
        brightness: 100  # Gentle brightness
        transition: 4
    
    # Use shared breathing effect
    - service: script.co2_led_breathing_effect
      data:
        entity_id: "{{ entity_id }}"
        target_brightness: 100
        pulse_count: 2

co2_led_restore_normal:
  alias: "Restore Normal LED State"
  description: "Restore LED to previous state before CO2 notification"
  fields:
    entity_id:
      description: "LED strip entity to restore"
      example: "light.bedroom_led_strip"
  sequence:
    # Restore the saved scene
    - service: scene.turn_on
      data:
        entity_id: "scene.co2_led_restore_{{ entity_id.split('.')[1] }}"
        transition: 5
    
    # Clean up the temporary scene after restoration
    - delay: 6
    - service: scene.delete
      data:
        entity_id: "scene.co2_led_restore_{{ entity_id.split('.')[1] }}"
      continue_on_error: true